# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: skynet_core.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='skynet_core.proto',
  package='skynet_core',
  syntax='proto3',
  serialized_pb=_b('\n\x11skynet_core.proto\x12\x0bskynet_core\"\x1b\n\x04\x63\x61ll\x12\x13\n\x0brequest_msg\x18\x01 \x01(\t\"\x1a\n\x05reply\x12\x11\n\treply_msg\x18\x01 \x01(\t2\xdd\x01\n\x0bSkynetProto\x12\x34\n\theartbeat\x12\x11.skynet_core.call\x1a\x12.skynet_core.reply\"\x00\x12/\n\x04push\x12\x11.skynet_core.call\x1a\x12.skynet_core.reply\"\x00\x12\x33\n\x08register\x12\x11.skynet_core.call\x1a\x12.skynet_core.reply\"\x00\x12\x32\n\x07\x63onfigs\x12\x11.skynet_core.call\x1a\x12.skynet_core.reply\"\x00\x42*\n\x13io.grpc.skynet_coreB\x0bSkynetProtoP\x01\xa2\x02\x03HLWb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CALL = _descriptor.Descriptor(
  name='call',
  full_name='skynet_core.call',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_msg', full_name='skynet_core.call.request_msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=34,
  serialized_end=61,
)


_REPLY = _descriptor.Descriptor(
  name='reply',
  full_name='skynet_core.reply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reply_msg', full_name='skynet_core.reply.reply_msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=63,
  serialized_end=89,
)

DESCRIPTOR.message_types_by_name['call'] = _CALL
DESCRIPTOR.message_types_by_name['reply'] = _REPLY

call = _reflection.GeneratedProtocolMessageType('call', (_message.Message,), dict(
  DESCRIPTOR = _CALL,
  __module__ = 'skynet_core_pb2'
  # @@protoc_insertion_point(class_scope:skynet_core.call)
  ))
_sym_db.RegisterMessage(call)

reply = _reflection.GeneratedProtocolMessageType('reply', (_message.Message,), dict(
  DESCRIPTOR = _REPLY,
  __module__ = 'skynet_core_pb2'
  # @@protoc_insertion_point(class_scope:skynet_core.reply)
  ))
_sym_db.RegisterMessage(reply)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\023io.grpc.skynet_coreB\013SkynetProtoP\001\242\002\003HLW'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class SkynetProtoStub(object):
  """The skynet service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.heartbeat = channel.unary_unary(
        '/skynet_core.SkynetProto/heartbeat',
        request_serializer=call.SerializeToString,
        response_deserializer=reply.FromString,
        )
    self.push = channel.unary_unary(
        '/skynet_core.SkynetProto/push',
        request_serializer=call.SerializeToString,
        response_deserializer=reply.FromString,
        )
    self.register = channel.unary_unary(
        '/skynet_core.SkynetProto/register',
        request_serializer=call.SerializeToString,
        response_deserializer=reply.FromString,
        )
    self.configs = channel.unary_unary(
        '/skynet_core.SkynetProto/configs',
        request_serializer=call.SerializeToString,
        response_deserializer=reply.FromString,
        )


class SkynetProtoServicer(object):
  """The skynet service definition.
  """

  def heartbeat(self, request, context):
    """Sends a heartbeat
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def push(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def register(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def configs(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SkynetProtoServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'heartbeat': grpc.unary_unary_rpc_method_handler(
          servicer.heartbeat,
          request_deserializer=call.FromString,
          response_serializer=reply.SerializeToString,
      ),
      'push': grpc.unary_unary_rpc_method_handler(
          servicer.push,
          request_deserializer=call.FromString,
          response_serializer=reply.SerializeToString,
      ),
      'register': grpc.unary_unary_rpc_method_handler(
          servicer.register,
          request_deserializer=call.FromString,
          response_serializer=reply.SerializeToString,
      ),
      'configs': grpc.unary_unary_rpc_method_handler(
          servicer.configs,
          request_deserializer=call.FromString,
          response_serializer=reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'skynet_core.SkynetProto', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaSkynetProtoServicer(object):
  """The skynet service definition.
  """
  def heartbeat(self, request, context):
    """Sends a heartbeat
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def push(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def register(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def configs(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaSkynetProtoStub(object):
  """The skynet service definition.
  """
  def heartbeat(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Sends a heartbeat
    """
    raise NotImplementedError()
  heartbeat.future = None
  def push(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  push.future = None
  def register(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  register.future = None
  def configs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  configs.future = None


def beta_create_SkynetProto_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('skynet_core.SkynetProto', 'configs'): call.FromString,
    ('skynet_core.SkynetProto', 'heartbeat'): call.FromString,
    ('skynet_core.SkynetProto', 'push'): call.FromString,
    ('skynet_core.SkynetProto', 'register'): call.FromString,
  }
  response_serializers = {
    ('skynet_core.SkynetProto', 'configs'): reply.SerializeToString,
    ('skynet_core.SkynetProto', 'heartbeat'): reply.SerializeToString,
    ('skynet_core.SkynetProto', 'push'): reply.SerializeToString,
    ('skynet_core.SkynetProto', 'register'): reply.SerializeToString,
  }
  method_implementations = {
    ('skynet_core.SkynetProto', 'configs'): face_utilities.unary_unary_inline(servicer.configs),
    ('skynet_core.SkynetProto', 'heartbeat'): face_utilities.unary_unary_inline(servicer.heartbeat),
    ('skynet_core.SkynetProto', 'push'): face_utilities.unary_unary_inline(servicer.push),
    ('skynet_core.SkynetProto', 'register'): face_utilities.unary_unary_inline(servicer.register),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_SkynetProto_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('skynet_core.SkynetProto', 'configs'): call.SerializeToString,
    ('skynet_core.SkynetProto', 'heartbeat'): call.SerializeToString,
    ('skynet_core.SkynetProto', 'push'): call.SerializeToString,
    ('skynet_core.SkynetProto', 'register'): call.SerializeToString,
  }
  response_deserializers = {
    ('skynet_core.SkynetProto', 'configs'): reply.FromString,
    ('skynet_core.SkynetProto', 'heartbeat'): reply.FromString,
    ('skynet_core.SkynetProto', 'push'): reply.FromString,
    ('skynet_core.SkynetProto', 'register'): reply.FromString,
  }
  cardinalities = {
    'configs': cardinality.Cardinality.UNARY_UNARY,
    'heartbeat': cardinality.Cardinality.UNARY_UNARY,
    'push': cardinality.Cardinality.UNARY_UNARY,
    'register': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'skynet_core.SkynetProto', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
